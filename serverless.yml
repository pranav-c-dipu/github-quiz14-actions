service: quiz-app16
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1 
  environment:
    COGNITO_USER_POOL_ID: !Ref UserPool
    COGNITO_CLIENT_ID:  !Ref UserClient
    table_name: !Ref quizTable
    quiz_resultsDb: !Ref quizResults

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:SignUp
        - cognito-idp:ConfirmSignUp
        - cognito-idp:AdminCreateUse
        - cognito-idp:AdminConfirmSignUp
        - cognito-idp:AdminGetUser
        - cognito-idp:ForgotPassword
        - cognito-idp:ConfirmForgotPassword
        - cognito-idp:GlobalSignOut 
        - cognito-idp:AdminUserGlobalSignOut  
        - s3:PutObject
        - s3:GetObject             
      Resource: "*"


    

functions:

  createQuiz:
    handler: handler.createQuiz
    environment:
      QUIZ_TABLE_NAME: !Ref quizTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt quizTable.Arn
    events:
      - http:
          method: put
          path: Admin/createQuiz/{userID}
          cors: true
          # authorizer:
          #     name: QuizAuthorizer
          #     type: COGNITO_USER_POOLS
          #     arn: !GetAtt UserPool.Arn 

 
  getallQuiz:
    handler: handler.getAllQuiz
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: !GetAtt quizTable.Arn 
    events:
      - http:
          path: Admin/getallQuiz
          method: get
          cors: true
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn 

  getQuizResults:
    handler: get_quiz_results.handler
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: !GetAtt quizResults.Arn 
    events:
      - http:
          path: getQuizResults
          method: get
          cors: true
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn                          
 
  getQuizByID:
    handler: handler.getQuiz
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: !GetAtt quizTable.Arn 
    events:
      - http:
          path: getQuizByID/{quizId}
          method: get
          cors: true  
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn    

  getQuizAdmin:
    handler: handler.getQuizAdmin
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: !GetAtt quizTable.Arn 
    events:
      - http:
          path: Admin/getQuiz/userID/{userID}
          method: get
          cors: true  
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn    


                 
  userSignUp:
    handler: userSignup.handler
    events:
      - http:
          method: post
          path: user/signup 
          cors: true

  getUser:
    handler: get_user.handler
    events:
      - http:
          method: post
          path: getUser
          cors: true
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn     


  forgotPassword:
    handler: forgotPwd.handler
    events:
      - http:
          method: post
          path: user/forgotPassword
          cors: true   

  confirmPassword:
    handler: confirmForgPwd.handler
    events:
      - http:
          method: post
          path: user/forgotPassword/confirm 
          cors: true            
        



  userSignupConfirmation: 
    handler: confirmUser.handler
    events:
      - http:
          path: user/confirmsignup
          method: post
          cors: true


  loginUser:
    handler: userSignIn.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signOut:
    handler: signOut.handler
    events:
      - http:
          path: user/logout
          method: post
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn  


              # QUIZ ACTIVITY

  addUserDetailsToQuiz:
    handler: quiz_activity/addUserDetailsQuiz.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem                          
        Resource: !GetAtt quizTable.Arn      
    events:
      - http:
          path: addUserDetailsToQuiz/{quizId}/{userId}
          method: post       
          description: Add or update user details for a specific quiz.          


  quizAttendance:
    handler: quiz_activity/quizAttendance.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem                       
        Resource: !GetAtt quizTable.Arn      
    events:
      - http:
          path: quizAttendance/{quizId}
          method: get   
          description: Add or update user details for a specific quiz.
          

  getUserActivity:
    handler: quiz_activity/UserActivity.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan               
        Resource: !GetAtt quizTable.Arn      
    events:
      - http:
          path: getUserActivity/{userId}
          method: get   
          description: Retrieve a users activity.                    



  storeQuizResults:
    handler: save_quiz_results.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt quizResults.Arn    
    events:
      - http:
          path: store/Quiz-results
          method: post     
          authorizer:
              name: QuizAuthorizer
              type: COGNITO_USER_POOLS
              arn: !GetAtt UserPool.Arn                            

  imageUploadFunction:
    handler: uploadImage.handler 
    events:
      - http:
          path: uploadImage
          method: post 
          cors: true
    environment:
      AWS_S3_BUCKET_NAME: quiz-image-bucket

  getImageUrl:
    handler: getImageURL.handler
    environment:
      AWS_S3_BUCKET_NAME: quiz-image-bucket
    events:
      - http:
          path: get-image-url
          method: POST      





plugins:
  - serverless-iam-roles-per-function  

resources:
  Resources:

    quizTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Quiz-maintable-16
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE


    quizResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Quiz-Results
        BillingMode: PAY_PER_REQUEST             
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S 
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    ImageUploadS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:  quiz-image-bucket
          
            

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: quiz-16,
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT        
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
            #name
          - Name: name
            Required: true
            Mutable: true
            #phonenumber         
          - Name: phone_number
            Required: true
            Mutable: true
            #location
          - Name: country
            AttributeDataType: String
            #groupName
          - Name: group
            AttributeDataType: String
            Required: false
            #Date of Birth
          - Name: birthdate
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6 

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: client-16
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"                        

    AdminsGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Admins"
        GroupName: "ADMIN"
        Precedence: 2
        #RoleArn: ""
        UserPoolId: !Ref UserPool
    
    UsersGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: " Users"
        GroupName: "USER"
        Precedence: 3
        #RoleArn: ""
        UserPoolId: !Ref UserPool


